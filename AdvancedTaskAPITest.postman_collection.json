{
	"info": {
		"_postman_id": "5ff23639-3982-47cb-9ce9-73e8afd9fc22",
		"name": "AdvancedTaskAPITest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24193385"
	},
	"item": [
		{
			"name": "Sign in function",
			"item": [
				{
					"name": "Sign In to Mars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()\r",
									"var user_token = jsonData.token.token\r",
									"pm.environment.set(\"env_token\", \"Bearer\"+\" \"+user_token)\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"isSuccess\":{\"type\":\"boolean\"},\r",
									"     \"token\":{\r",
									"        \"token\":{\"type\":\"string\"},\r",
									"        \"expires\":{\"type\":\"boolean\"}\r",
									"     }    \r",
									"    },\r",
									"    \"required\":[\"isSuccess\",\"token\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success Message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isSuccess).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"rememberMe\": false,\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{login_base_url}}/authentication/authentication/signin",
							"host": [
								"{{login_base_url}}"
							],
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "User Details",
					"item": [
						{
							"name": "User Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message should be same as expected message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Availability Updated Successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"message\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"message\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"AvailabilityType\": \"{{availabilityType}}\",\r\n    \"AvailableHours\": {{availableHours}},\r\n    \"EarnTarget\": {{earnTarget}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/updateAvailability",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"updateAvailability"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Message should same as expect\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Password Changed Successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"message\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"message\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"oldPassword\": \"{{password}}\",\r\n  \"newPassword\": \"{{newPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{login_base_url}}/authentication/authentication/updatePassword",
									"host": [
										"{{login_base_url}}"
									],
									"path": [
										"authentication",
										"authentication",
										"updatePassword"
									]
								}
							},
							"response": []
						},
						{
							"name": "Description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"message\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"message\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"personId\": 0,\r\n  \"description\": \"{{description}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/addInfo",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"addInfo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Languages",
					"item": [
						{
							"name": "Add Languages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json()\r",
											"var language_id = jsonData.id\r",
											"pm.globals.set(\"languages_id\",language_id);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"id\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"id\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"{{languageName}}\",\r\n  \"level\": \"{{languageLevel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/addLanguage",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Languages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"message\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"message\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{languages_id}}\",\r\n  \"name\": \"{{updateLanguageName}}\",\r\n  \"level\": \"{{updateLanguageLevel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/updateLanguage",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"updateLanguage"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Languages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"language\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"language\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{languages_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/deleteLanguage",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"deleteLanguage"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Skills",
					"item": [
						{
							"name": "Add Skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"var skill_id = jsonData.id\r",
											"pm.globals.set(\"skills_id\",skill_id);\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"id\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"id\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"{{skill}}\",\r\n  \"ExperienceLevel\": \"{{experienceLevel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/addSkill",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"addSkill"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"id\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"id\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"PersonSkillId\": \"{{skills_id}}\",\r\n    \"Skill\": \"{{updateSkill}}\",\r\n    \"ExperienceLevel\": \"{{updateExperienceLevel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/updateSkill",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"updateSkill"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Skills",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"skill\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"skill\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": \"{{skills_id}}\",\r\n  \"Skill\": \"{{updateSkill}}\",\r\n  \"ExperienceLevel\": \"{{updateExperienceLevel}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/deleteSkill",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"deleteSkill"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Certifications",
					"item": [
						{
							"name": "Add Certification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"var certification_id = jsonData.id\r",
											"pm.globals.set(\"certification_id\",certification_id);\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"id\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"id\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"{{certiName}}\",\r\n  \"certificationFrom\": \"{{certiForm}}\",\r\n  \"certificationYear\": \"{{certiYear}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/addCertification",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"addCertification"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Certification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"}\r",
											"    },\r",
											"    \"required\":[\"success\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{certification_id}}\",\r\n  \"certificationName\": \"{{updateCerName}}\",\r\n  \"certificationFrom\": \"{{updateCerForm}}\",\r\n  \"certificationYear\": \"{{updateCerYear}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/updateCertification",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"updateCertification"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Certification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Success message should be true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"     \"success\":{\"type\":\"boolean\"},\r",
											"     \"certificationName\":{\"type\":\"string\"}\r",
											"    },\r",
											"    \"required\":[\"success\",\"certificationName\"]\r",
											"};\r",
											"\r",
											"pm.test(\"Validate response schema\", () => {\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{env_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{certification_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{profile_base_url}}/profile/profile/deleteCertification",
									"host": [
										"{{profile_base_url}}"
									],
									"path": [
										"profile",
										"profile",
										"deleteCertification"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Manage Listings",
			"item": [
				{
					"name": "Add new listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json()\r",
									"var listing_id = jsonData.id\r",
									"pm.globals.set(\"listings_id\",listing_id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The success should be true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"id\":{\"type\":\"string\"},\r",
									"     \"editFlag\":{\"type\":\"boolean\"}\r",
									"    },\r",
									"    \"required\":[\"success\",\"id\",\"editFlag\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{skillTitle}}\",\r\n    \"description\": \"{{skillDescription}}\",\r\n    \"categoryId\": \"{{skillCategoryId}}\",\r\n    \"subcategoryId\": \"{{skillSubcategoryId}}\",\r\n    \"tags\": [\r\n        {\r\n            \"id\": \"{{tagsId1}}\",\r\n            \"text\": \"{{tagsText1}}\"\r\n        },\r\n        {\r\n            \"id\": \"{{tagsId2}}\",\r\n            \"text\": \"{{tagsText2}}\"\r\n        }\r\n    ],\r\n    \"serviceType\": {{skillServiceType}},\r\n    \"locationType\": {{skillLocationType}},\r\n    \"availability\": {\r\n        \"startDate\": \"{{skillStartDate}}\",\r\n        \"endDate\": \"{{skillEndDate}}\",\r\n        \"dayEntries\": [\r\n            {\r\n                \"StartTime\": \"{{skillStartTime}}\",\r\n                \"EndTime\": \"{{skillEndTime}}\",\r\n                \"Available\": {{skillAvailable}}\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            },\r\n            {\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\",\r\n                \"Available\": false\r\n            }\r\n        ]\r\n    },\r\n    \"skillTrade\": [\r\n        {\r\n            \"id\": \"{{skillTradeId}}\",\r\n            \"text\": \"{{skillTradeText}}\"\r\n        }\r\n    ],\r\n    \"isTradable\": {{isTradable}},\r\n    \"charge\": {{skillCharge}},\r\n    \"credentials\": {{skillCredentials}},\r\n    \"isActive\": {{skillIsActive}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{listings_and_request_url}}/listing/listing/addListing",
							"host": [
								"{{listings_and_request_url}}"
							],
							"path": [
								"listing",
								"listing",
								"addListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success Message should be true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"id\":{\"type\":\"string\"},\r",
									"     \"editFlag\":{\"type\":\"boolean\"}\r",
									"    },\r",
									"    \"required\":[\"success\",\"id\",\"editFlag\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"LOL\",\r\n    \"description\": \"Hi!!Anyone play LOL?\",\r\n    \"categoryId\": 8,\r\n    \"subcategoryId\": \"5\",\r\n    \"tags\": [\r\n        {\r\n            \"id\": \"LOL\",\r\n            \"text\": \"LOL\"\r\n        },\r\n        {\r\n            \"id\": \"Games\",\r\n            \"text\": \"Games\"\r\n        }\r\n    ],\r\n    \"serviceType\": 1,\r\n    \"locationType\": 0,\r\n    \"availability\": {\r\n        \"startDate\": \"2023/10/30\",\r\n        \"endDate\": \"2023/11/30\",\r\n        \"dayEntries\": [\r\n            {\r\n                \"Available\": false,\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\"\r\n            },\r\n            {\r\n                \"Available\": true,\r\n                \"StartTime\": \"12:00\",\r\n                \"EndTime\": \"14:30\"\r\n            },\r\n            {\r\n                \"Available\": false,\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\"\r\n            },\r\n            {\r\n                \"Available\": false,\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\"\r\n            },\r\n            {\r\n                \"Available\": false,\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\"\r\n            },\r\n            {\r\n                \"Available\": false,\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\"\r\n            },\r\n            {\r\n                \"Available\": false,\r\n                \"StartTime\": \"\",\r\n                \"EndTime\": \"\"\r\n            }\r\n        ]\r\n    },\r\n    \"skillTrade\": [\r\n        {\r\n            \"id\": \"Hero\",\r\n            \"text\": \"Hero\"\r\n        }\r\n    ],\r\n    \"isTradable\": true,\r\n    \"charge\": 0,\r\n    \"credentials\": true,\r\n    \"isActive\": true,\r\n    \"id\": \"{{listings_id}}\",\r\n    \"sellerId\": \"647534923a2ba900019a4570\",\r\n    \"workSample\": null,\r\n    \"comments\": null,\r\n    \"ratings\": null,\r\n    \"ratingAverages\": null,\r\n    \"ratingTotalsAndCounts\": null,\r\n    \"createdOn\": \"2023-07-17T06:39:03.364Z\",\r\n    \"createdBy\": \"647534923a2ba900019a4570\",\r\n    \"updatedOn\": \"2023-08-24T23:51:59.057Z\",\r\n    \"updatedBy\": \"647534923a2ba900019a4570\",\r\n    \"isDeleted\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{listings_and_request_url}}/listing/listing/addListing",
							"host": [
								"{{listings_and_request_url}}"
							],
							"path": [
								"listing",
								"listing",
								"addListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success message should be true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"title\":{\"type\":\"string\"}\r",
									"    },\r",
									"    \"required\":[\"success\",\"title\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{listings_id}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{listings_and_request_url}}/listing/listing/deleteServiceListing",
							"host": [
								"{{listings_and_request_url}}"
							],
							"path": [
								"listing",
								"listing",
								"deleteServiceListing"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success message should be true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"noOfNotification\":{\"type\":\"number\"},\r",
									"     \"noOfMessages\":{\"type\":\"number\"}\r",
									"    },\r",
									"    \"required\":[\"success\",\"noOfNotification\",\"noOfMessages\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{profile_base_url}}/notification/notification/getNewNotificationCount",
							"host": [
								"{{profile_base_url}}"
							],
							"path": [
								"notification",
								"notification",
								"getNewNotificationCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Success message should be true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"    },\r",
									"    \"required\":[\"success\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{profile_base_url}}/notification/notification/readAllNotifications",
							"host": [
								"{{profile_base_url}}"
							],
							"path": [
								"notification",
								"notification",
								"readAllNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Load more notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Success message should be true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"userNotifications\":{\"type\":\"array\"},\r",
									"     \"totalCount\":{\"type\":\"number\"}\r",
									"    },\r",
									"    \"required\":[\"success\",\"userNotifications\",\"totalCount\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{profile_base_url}}/notification/notification/getNotification/?loadMore=6&offSet=0&_=1693267954213",
							"host": [
								"{{profile_base_url}}"
							],
							"path": [
								"notification",
								"notification",
								"getNotification",
								""
							],
							"query": [
								{
									"key": "loadMore",
									"value": "6"
								},
								{
									"key": "offSet",
									"value": "0"
								},
								{
									"key": "_",
									"value": "1693267954213"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Marked Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"message\":{\"type\":\"string\"}\r",
									"    },\r",
									"    \"required\":[\"success\",\"message\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"64ed3cd4e8ab8600015a4105\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{profile_base_url}}/notification/notification/removeMarkedNotifications",
							"host": [
								"{{profile_base_url}}"
							],
							"path": [
								"notification",
								"notification",
								"removeMarkedNotifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chat",
			"item": [
				{
					"name": "Get the chat room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"chatroom\":{\"type\":\"string\"},\r",
									"     \"myCurrentUser\":{\"type\":\"string\"}\r",
									"    },\r",
									"    \"required\":[\"success\",\"chatroom\",\"myCurrentUser\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"success\": true,\r\n  \"chatroom\": \"5c621663bea4490005ebe9d2\",\r\n  \"myCurrentUser\": \"647534923a2ba900019a4570\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{profile_base_url}}/profile/profile/getFirstChatroom",
							"host": [
								"{{profile_base_url}}"
							],
							"path": [
								"profile",
								"profile",
								"getFirstChatroom"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Chat room history",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The success message should be true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"     \"success\":{\"type\":\"boolean\"},\r",
									"     \"result\":{\"type\":\"array\"},\r",
									"    },\r",
									"    \"required\":[\"success\",\"result\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate response schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{env_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserIdToList\": [\r\n        \"5c621663bea4490005ebe9d2\",\r\n        \"64e82952b5b72800011eb5dd\"\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{profile_base_url}}/profile/profile/getChatRoomDetailsList/",
							"host": [
								"{{profile_base_url}}"
							],
							"path": [
								"profile",
								"profile",
								"getChatRoomDetailsList",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
}